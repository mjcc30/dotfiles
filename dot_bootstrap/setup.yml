---
- name: Machine setup
  hosts: localhost
  become: true
  connection: local
  gather_facts: true
  # vars_prompt:
  #   - name: atuin_user
  #     prompt: What is your atuin username?
  #     private: true
  #
  #   - name: atuin_pass
  #     prompt: What is your atuin password?
  #     private: true

  tasks:
    - name: Get my user
      ansible.builtin.set_fact:
        user: "{{ lookup('env', 'USER') or ansible_user }}"

    - name: Safe upgrade of all installed packages
      apt:
        update_cache: yes
        upgrade: safe
        cache_valid_time: 86400

    - name: Install various apt packages
      apt:
        update_cache: yes
        name: # list packages to install
          - jq
          - git
          - wget
          - gnupg
          - gnupg2
          - zsh
          - fzf
          - unzip
          - fastfetch
          - distrobox
          - discord
        state: present
        install_recommends: yes

    - name: Clean cache & remove unnecessary dependencies
      apt:
        autoclean: yes
        autoremove: yes

    - name: Change shell to zsh
      ansible.builtin.user:
        name: "{{ user }}"
        shell: /usr/bin/zsh

    - name: Install prerequisites for Docker repository
      apt:
        update_cache: yes
        name:
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg

    - name: add docker apt repo
      become: yes
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian bookworm stable"
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        update_cache: yes
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
        install_recommends: yes

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ user }}"
        groups: docker
        append: true

    # Install Nerd font
    - name: Install Jetbrains Nerd Font
      block:
        - name: Create Directory
          ansible.builtin.file:
            path: "/home/{{ user }}/.fonts/JetBrainsMonoNerd"
            state: directory
            mode: "0755"
            owner: "{{ user }}"
            group: "{{ user }}"
        - name: Download
          ansible.builtin.unarchive:
            src: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip
            dest: "/home/{{ user }}/.fonts/JetBrainsMonoNerd"
            remote_src: true
            owner: "{{ user }}"
            group: "{{ user }}"

    - name: Font cache update
      action: command fc-cache -fv

    - name: Check if Starship is installed
      ansible.builtin.stat:
        path: /home/{{ user }}/.config/starship.toml
      register: starship

    - name: Install starship
      when: not starship.stat.exists
      ansible.builtin.shell: "curl -sS https://starship.rs/install.sh | sh -s -- --yes --bin-dir /usr/local/bin"
      args:
        executable: /bin/bash

    - name: Download Atuin setup script
      get_url:
        url: https://setup.atuin.sh
        dest: /tmp/setup_atuin.sh
        mode: '0755'

    - name: Run the Atuin setup script
      command: /tmp/setup_atuin.sh
      register: atuin_install
      become: true
      become_user: "{{ user }}"

    # - name: login to atuin
    #   command: /home/{{ user }}/.atuin/bin/atuin login -u "{{ atuin_user }}" -p "{{ atuin_pass }}" -k "{{ atuin_key }}"
    #   when: atuin_install.rc == 0
    #   become: true
    #   become_user: "{{ user }}"

    - name: Install multiple packages from flatpak
      community.general.flatpak:
        name:
          - org.gimp.GIMP
          - org.inkscape.Inkscape
          - org.mozilla.firefox
          - app.zen_browser.zen
          - org.dupot.easyflatpak
          - org.fedoraproject.MediaWriter
        state: latest

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Reboot if required
      reboot:
        msg: Rebooting due to a kernel update
      when: reboot_required_file.stat.exists
